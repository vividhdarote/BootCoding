***LIST***

**Comparator**
// public static class MyComparator implements Comparator<Integer> {
    //     // In what order we will get the list sorted ascending or descending will be decided by using this compare method
    //     // compare method return positive value if o1 > o2  order will be ascending and negative value if o1 < o2 order will be descending
    //     @Override
    //     public int compare(Integer o1, Integer o2) {
    //         return o2-o1; // descending order
    //         // return o1-o2; // ascending order
    //         //In general O1 is always taken a larger value and O2 is always taken a smaller value.
    //         //O1>O2 -> O2-O1 is negative , that means int is -ve hence descending order.
    //         //O1<O2 -> O1-O2 is positive , that means int is +ve hence ascending order
    //     }
    // }

    // public class StringComparator implements Comparator<String> {
    //     @Override
    //     public int compare(String o1, String o2) {
    //         return o1.length()-o2.length();
    //     }
    // }



**CopyOnWriteArrayList**
CopyOnWriteArrayList<Integer> list = new CopyOnWriteArrayList<>();
// "Copy on Write" means that whenever a write operation
            // like adding or removing an element
            // instead of directly modifying the existing list
            // a new copy of the list is created, and the modification is applied to that copy
            // This ensures that other threads reading the list while it’s being modified are unaffected.

            // Read Operations: Fast and direct, since they happen on a stable list without interference from modifications.
            // Write Operations: A new copy of the list is created for every modification.
            //                  The reference to the list is then updated so that subsequent reads use this new list.

            // Example: notepad --> notepad-copy


**ArrayList**
//Key Characteristics:
          Dynamic Size: Unlike a regular array, an ArrayList can grow or shrink in size as elements are added or removed.
          Type-Safe: It can store objects of a specified type (e.g., String, Integer) using generics.
          Backed by an Array: Internally, it uses an array to store elements, but it automatically handles resizing when needed.
          Random Access: Provides fast access to elements by index (O(1) time complexity).
          Resizing Mechanism: Size Increase by 1.5 times
//Common Operations:
          Adding Elements: add(element) – Adds an element to the end or at a specific index.
          Removing Elements: remove(index) or remove(object) – Removes an element by index or value.
          Accessing Elements: get(index) – Retrieves an element at a specific index.
          Size: size() – Returns the number of elements in the ArrayList.
          Clearing: clear() – Removes all elements.
Limitations:
          Slower for insertions/deletions at the beginning or middle (O(n) time complexity due to shifting elements).
          Uses more memory than a regular array due to its dynamic nature.


**LinkedList**
A LinkedList is a data structure that consists of a sequence of nodes
where each node contains data and a reference (or link) to the next node.
In Java, LinkedList is a class in the Java Collections Framework that implements a doubly-linked list,
meaning each node also has a reference to the previous node.

//Key Characteristics:
          Dynamic Size: Like ArrayList, a LinkedList can grow or shrink as elements are added or removed.
          Node-Based: Elements are stored in nodes, and each node links to the next (and previous, in a doubly-linked list).
          Non-Contiguous Memory: Unlike arrays, nodes are not stored in contiguous memory locations, allowing for efficient insertions and deletions.
          Type-Safe: Supports generics to store objects of a specific type (e.g., String, Integer).


//Common Operations:
          Adding Elements:add(element) – Adds an element to the end.
                          addFirst(element) / addLast(element) – Adds an element to the start or end.
          Removing Elements:remove(index) or remove(object) – Removes an element by index or value.
                          removeFirst() / removeLast() – Removes the first or last element.
          Accessing Elements: get(index) – Retrieves an element at a specific index (slower than ArrayList).
          Size: size() – Returns the number of elements.
          Clearing: clear() – Removes all elements.

//Advantages:
          Efficient insertions and deletions, especially at the beginning or end (O(1) time complexity).
          No need for resizing, unlike ArrayList.
          Doubly-linked nature allows bidirectional traversal.
//Limitations:
          Slower access to elements by index (O(n) time complexity, as it requires traversal).
          Higher memory overhead due to storing node references.
          Not suitable for random access or frequent index-based operations.



**Vector**
A Vector is a dynamic array-like data structure in Java that is part of the Java Collections Framework.
It is similar to ArrayList but with some key differences, such as being synchronized (thread-safe) and having a legacy status.
//Key Characteristics:
          Dynamic Size: Like ArrayList, a Vector can grow or shrink as elements are added or removed.
          Synchronized: All methods in Vector are synchronized, making it thread-safe for use in multi-threaded environments.
          Backed by an Array: Internally, it uses an array to store elements and automatically resizes when needed.
          Legacy Class: Introduced in Java 1.0, it is considered a legacy class but still supported for backward compatibility.
          Type-Safe: Supports generics (since Java 1.5) to store objects of a specific type (e.g., String, Integer).
          Resizing Mechanism: Size Increase by 2 times
//Common Operations:
          Adding Elements: add(element) – Adds an element to the end.
                           addElement(element) – Legacy method to add an element (similar to add).
          Removing Elements:remove(index) or remove(object) – Removes an element by index or value.
                            removeElement(object) – Legacy method to remove an element.
          Accessing Elements: get(index) – Retrieves an element at a specific index.
          Size: size() – Returns the number of elements.
          Capacity: capacity() – Returns the current capacity (size of the underlying array).
          Clearing: clear() or removeAllElements() – Removes all elements.
//Advantages:
          Thread-safe by default, useful in multi-threaded applications.
          Dynamic resizing, similar to ArrayList.
          Backward compatibility with older Java code.
//Limitations:
          Performance Overhead: Synchronization adds overhead, making it slower than ArrayList for single-threaded applications.
          Legacy Status: Many of its methods (e.g., addElement, removeElement) are outdated, and ArrayList is preferred in modern Java code.
          Higher memory usage due to synchronization and capacity management.



**Stack**
A Stack is a data structure that follows the Last-In-First-Out (LIFO) principle
meaning the last element added is the first one to be removed.
In Java, Stack is a class that extends Vector and is part of the Java Collections Framework.
//Key Characteristics:
          LIFO Order: Elements are added and removed from the top of the stack.
          Dynamic Size: Like Vector, it can grow or shrink as elements are added or removed.
          Synchronized: Inherits thread-safety from Vector, making it suitable for multi-threaded environments.
          Legacy Class: While still functional, it is considered outdated, and modern alternatives like Deque (e.g., ArrayDeque) are recommended.
//Core Operations:
          Push: push(element) – Adds an element to the top of the stack.
          Pop: pop() – Removes and returns the top element from the stack. Throws EmptyStackException if the stack is empty.
          Peek: peek() – Returns the top element without removing it. Throws EmptyStackException if the stack is empty.
          Empty Check: empty() – Returns true if the stack is empty, false otherwise.
          Search: search(element) – Returns the 1-based position of an element from the top (or -1 if not found).
//Advantages:
          Simple implementation of the LIFO principle.
          Thread-safe due to synchronization (inherited from Vector).
          Built-in methods for stack-specific operations.
//Limitations:
          Performance Overhead: Synchronization makes it slower than unsynchronized alternatives like ArrayDeque.
          Legacy Status: Extends Vector, which is outdated. Modern Java recommends using Deque implementations (e.g., ArrayDeque) for stack operations.
          Limited Functionality: Lacks some features of more modern data structures.




***MAP***

A Map is an interface that represents a data structure storing key-value pairs.
//Key Characteristics :
          Key-Value Pairs:        Each entry in a Map consists of a key and its associated value.
                                  Keys are unique, but values can be duplicated.
          No Duplicates for Keys: A Map cannot contain duplicate keys.
                                  If you try to insert a duplicate key, the existing value for that key will be overwritten Or (Replaced).
          Unordered by Default:   Most Map implementations (e.g., HashMap) do not guarantee any specific order of entries.
                                  However, some implementations like
                                  LinkedHashMap (maintains insertion order) and
                                  TreeMap (maintains sorted order) provide ordering.
          Null Values:            Most Map implementations allow null as a value, and some (e.g., HashMap) even allow null as a key.


**HashMap**
//Key Features of HashMap:
          Key-Value Storage: Each entry in a HashMap consists of a unique key and its associated value.
                             Keys are unique, but values can be duplicated.
          Hashing Mechanism: Uses a hash function to map keys to array indices (buckets) for storage.
                             This allows for constant-time (O(1)) average-case performance for basic operations.
          No Order Guarantee: Does not maintain any specific order of entries (neither insertion order nor sorted order).
          Null Handling: Allows one null key and multiple null values.
          Not Synchronized: Not thread-safe by default. For concurrent access, use ConcurrentHashMap instead.

//How HashMap Works Internally:
          Underlying Structure: A HashMap uses an array of buckets,
                                where each bucket can store multiple entries in case of hash collisions (using linked lists or trees).
          Hashing: When a key is provided, its hashCode() method is called to generate a hash code, which is then mapped to an index in the array.

//Collision Handling:
If two keys hash to the same index (collision), they are stored in the same bucket.
          Before Java 8:            Collisions were handled using linked lists.
          After Java 8 -----------> the number of collisions exceeds a threshold,
                                    the linked list is converted to a balanced binary tree (red-black tree)
                                    to improve performance (O(log n) instead of O(n) for lookups).
          Load Factor and Resizing: The default load factor is 0.75.
                                    When the number of entries exceeds load factor * current capacity,
                                    the HashMap resizes by doubling its capacity and redistributing entries.

//Key Characteristics:
   *Performance:
          Average time complexity for get(), put(), and remove() is O(1) (assuming good hash distribution).
          Worst-case time complexity is O(log n) (due to tree conversion for collisions in Java 8+).
   *Initial Capacity and Load Factor:
          Default initial capacity: 16.
          Default load factor: 0.75 (balances time and space efficiency).
          You can specify custom values in the constructor for optimization.
   *Non-Synchronized:
          Not thread-safe. Use Collections.synchronizedMap() or ConcurrentHashMap for thread safety.

//Common Methods of HashMap:
          put(K key, V value): Associates the specified value with the specified key. If the key already exists, the old value is replaced.
          get(Object key): Returns the value associated with the specified key, or null if the key is not found.
          remove(Object key): Removes the entry for the specified key.
          containsKey(Object key): Checks if the map contains the specified key.
          containsValue(Object value): Checks if the map contains the specified value.
          keySet(): Returns a Set of all keys in the map.
          values(): Returns a Collection of all values in the map.
          entrySet(): Returns a Set of key-value pairs (entries) in the map.
          size(): Returns the number of key-value pairs.
          isEmpty(): Checks if the map is empty.
          clear(): Removes all entries from the map.


**LinkedHashMap**
//Key Features of LinkedHashMap:
          Key-Value Storage: Like other Map implementations, it stores data as key-value pairs,
                             with unique keys and potentially duplicate values.
          Insertion Order Maintenance: Maintains a doubly-linked list of entries,
                                       ensuring that the order in which entries are added is preserved during iteration.
          Hash Table Efficiency: Uses a hash table for storing entries,
                                 providing constant-time (O(1)) average-case performance for basic operations like get() and put().
          Null Handling: Allows one null key and multiple null values, similar to HashMap.
          Not Synchronized: Not thread-safe by default. For concurrent access, use Collections.synchronizedMap() or ConcurrentHashMap.

//How LinkedHashMap Works Internally:
          Underlying Structure: Combines a hash table (for fast lookups) with a doubly-linked list (to maintain order).
                                Each entry in the hash table is linked to the next and previous entries in the list.
          Order Preservation: The linked list ensures that entries are iterated in the same order they were inserted
                              (or accessed, if access-order mode is enabled).
          Collision Handling: Like HashMap, it handles hash collisions using linked lists or balanced trees (Java 8+),
                              but it also maintains the linked list for order tracking.

//Key Characteristics:
    Performance:
          Average time complexity for get(), put(), and remove() is O(1) (assuming good hash distribution).
          Slightly slower than HashMap due to the overhead of maintaining the linked list.
    Order Options:
          Insertion Order (default): Entries are iterated in the order they were added.
          Access Order (optional): Entries are reordered based on access, with the most recently accessed entry moved to the end.
                                   Useful for implementing caches like LRU (Least Recently Used).
    Initial Capacity and Load Factor:
          Default initial capacity: 16.
          Default load factor: 0.75 (balances time and space efficiency).
          Custom values can be specified in the constructor for optimization.


**SortedMap**
A SortedMap is an interface in the Java Collections Framework that extends the Map interface and
provides a way to store key-value pairs in a sorted order based on the keys.
It ensures that the keys are maintained in a specific order,
typically their natural ordering or a custom order defined by a Comparator.
SortedMap is part of the java.util package and is designed for use cases where ordered traversal of keys is required.
//Key Features :
          Sorted Keys: The keys in a SortedMap are automatically sorted according to their natural ordering (if they implement Comparable)
                       or a custom Comparator provided at creation.
          Key-Value Pairs: Like other Map implementations, it stores data as key-value pairs, with unique keys and potentially duplicate values.
          Navigable Operations: Provides methods to access subsets of the map based on key ranges,
                                as well as operations to retrieve the first and last keys.
          No Null Keys (in most implementations): Since sorting requires comparison, most implementations
                                                  (like TreeMap) do not allow null keys unless a custom Comparator explicitly supports it.
          Not Synchronized: Not thread-safe by default. For concurrent access, use Collections.synchronizedSortedMap() or ConcurrentSkipListMap.
//Key Characteristics:
   Performance:
          Time complexity for basic operations like get(), put(), and remove() is O(log n),
          as most implementations use balanced trees (e.g., red-black trees).
          Suitable for applications where sorted order is more important than raw performance (compared to HashMap's O(1)).
   Ordering:
          Keys are sorted either by their natural ordering (if they implement Comparable) or by a Comparator provided during map creation.
          The order is maintained dynamically as entries are added or removed.
   Subset Views:
          Provides methods to create submaps based on key ranges, such as subMap(), headMap(), and tailMap().

//Common Implementations of SortedMap:
   **TreeMap:
         The most widely used implementation of SortedMap.
         Uses a red-black tree (a self-balancing binary search tree) for storage.
         Maintains keys in sorted order with O(log n) performance for basic operations.
         Does not allow null keys by default (unless a custom Comparator supports it).
   **ConcurrentSkipListMap (Thread-Safe):
         A concurrent implementation of SortedMap that uses a skip list data structure.
         Provides thread-safe operations without locking the entire map.
         Maintains sorted order and supports O(log n) performance for basic operations.
         Does not allow null keys.
   **NavigableMap:
         A NavigableMap is an interface in the Java Collections Framework that extends the SortedMap interface


**HashTable
A hash table (also known as a hash map) is a data structure that implements an associative array abstract data type,
 a structure that can map keys to values. Here's a breakdown of how it works and its key properties:

//Concept:
         Hashing: Each key is converted into an array index via a hash function. This function maps the key to a unique index in the array, known as a "bucket" or "slot".
//Key Properties:
         Fast Access: Hash tables offer nearly constant-time performance, O(1),
                      for basic operations like insert, delete, and lookup, assuming a good hash function and no or minimal collisions.
         Collisions: When two keys hash to the same index (a collision), hash tables use various methods to handle this:
         Chaining: Each bucket holds a linked list or another data structure where items are stored if there's a collision.
         Open Addressing: If a collision occurs, the algorithm looks for the next empty slot in the array,
                          using strategies like linear probing, quadratic probing, or double hashing.
         Load Factor: The ratio of the number of entries to the size of the hash table.
                      If this gets too high, performance can degrade, leading to the need for rehashing where the table size is increased,
                      and all entries are rehashed into the new larger table.
         Hash Function: A critical component which should distribute keys uniformly across the hash table to minimize collisions.
                        A poor hash function can lead to clustering and decreased performance.
//Use Cases:
         Databases: For indexing records.
         Caches: To store recently used data for quick retrieval.


*** Set ***
It implements the Set interface and is backed by a HashMap.
No duplicates allowed — it only stores unique elements.
Unordered — it doesn’t guarantee any specific order of elements.

**HashSet

Duplicates:  HashSet doesn’t allow duplicate elements.
Null values: It allows a single null element.
Time complexity:
         add(), remove(), contains() — O(1) on average.
         Due to hashing, operations are usually constant time.
Order: Elements are unordered — use LinkedHashSet if ordering matters.


**LinkedHashSet
Insertion order: Maintains the order in which elements were inserted.
No duplicates:   Identical elements are ignored.
Null elements:   Allows one null value.
Thread-safety:   Not synchronized — use Collections.synchronizedSet() if needed.